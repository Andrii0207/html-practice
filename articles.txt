
PWA як перспективний напрямок об'єднання веб та мобільних технологій.

Вплив технологічних змін у сучасні продукти та послуги колосальний. З появою сматрфонів практика розробки 
традиційних мобільних додатків зазнає інноваційних змін. Це друдомісткий та дорогий процес через протребу 
програмістам розробляти, тестувати та підтримувати програми для різних платформ та простроїв. Тому більшість 
розробників мобільного програмного забеспечення реалізують різні стратегії для покращення розробки додатків, 
починаючи від нативних до гібридних програм. Крім того, протягом багатьох років було створено кілька підходів 
до кросплатформеної розробки у вигляді альтернативного шляху для нативної розробки. Мобільний інтернет
заснований на веб-додатку часто називають кросплатформеним. Цей тип додатків пропонують перевагу повної
сумістості додатків між такими платформами як Android та Apple. 

Поява кросплатформених фреймворків розробки значно полегшило створення додатків для кількох платформ. 
Крім того це зменшує витрати на розробку та зусилля, а також забеспечує швидший вихід на ринок. Однак 
кросплатформенні підходи переважають не у всіх випадках, оскільки забеспечують низку продуктивність і 
користувальницкий досвід через свою залежність від WebView (компонент браузера, інтегрований у браузер) 
та обмеження самого браузера.

Прогресивні веб-додатки PWA (Prograssive Web Application) - це нова веб-технологія, яку Google підтримує
як новий спосіб розробки, який об'єднує веб та мобільні технології. Це веб-розробка, яка візуально та 
функціонально трансформує сайт на додаток для різних пристроїв, які дозволяють істотно полегшити розробку 
у сфері веб-додатків. Але розробники не масово переходять на використання цієї технології у своїх проектах.
Генесис технології бере свій початок з 2007 року, де корпорація Apple здійснила дану розробку та надала
у користування у своєму браузері Safari для операційних систем MacOS та iOS. Однак технологія в той час 
не знайшла прихільників, однак у березні 2018 року відбулись суттеві зміни у сфері реалізації веб-стандартів.
В оновленій операційній системі iOS корпорація Apple додала підтримку технології ServiceWorker у мобільну 
версію свого браузера. Після цього решта компаній-розробників софту в області веб-технологій почали активно 
впроводжувати технологію PWA у свої платформи.

Можна виділити чотири основні групи технології PWA - статичні, клієнтські, фреймворки та ServiceWorker. 

До першої групи відносять HTML5, CSS3 та JavaScript, які направлені на створення користувальницкого інтерфейсу.
Цей інтерфейс відомий як оболонка програми, використовується для зверігання статичного вмісту програми, 
такого як навігація, домашня сторінка та інші ресурси, які залишаються однаковими для всієї програми 
(HTML, CSS-Minimal та JavaScript). Це потрібно для надання програмі скелету під час офлайн-запиту. Ця функція 
кешується на мобільному пристрої користувача, чим допомагає скоротити час завантаження додатків та при 
повторному відвідуванні додатка ще додатково зменшити час завантаження.

Друга група - це клієнтська сторона, яка використовує виклики веб-сервісів для завантаження та рендерингу 
контенту так само, як у нативних програмах. Це дає змогу працювати на попередження подій при який при виконанні
кожного запиту інтерфейс користувача і дані об'єднуються на стороні сервера і відразу відправляються клієнту.

Третя група - це група фреймворків. До них можна віднести Angular, React або Vue. Вони мають вбудовані 
вервіс-воркери, тому немає необхідності перебудовувати їх для кожної PWA.

Четверта група грунтується на ServiceWorker. Це код JavaScript, який запускається браузером у фономову режимі 
для фонової синхронизації та push-повідомлень та він не залежить від веб-сторінки. Це ефективно, оскільки 
ServiceWorker запускає окремий потік браузера разом з іншими API для забеспечення власних функцій програми. 
Це скрипт, який виконується у фоновому режимі для отримання повідомлень, навіть коли програма не активна. 
Крім того PWA було вдосконалено деякими технологіями, які дозволяють використовувати нативну поведінку 
на мобільному пристої, при цьому функціонуючи у веб-браузері.

До переваг використання PWA варто віднести:

1. Дозволяє легко навчатися та розвиватися, використовуючи існуючи веб-технології. PWA має властивості нативної 
програми і в той же час дозволяє використовувати функціонал браузера, який забеспечує додаткові можливості.
2. Встановлення програм на пристрій користувача перед використанням не є обов'язковим.
3. Додаток може бути доступним користувачам у автономному режимі. Програма кешуєтсья у пам'яті браузера і таким 
чином зберігає працездатність у автономному режимі.
4. PWA-технологія володіє кросплатформеністю. Програми, розроблені за цією технологією, можна встановлювати 
на будь-які пристрої нелалежно від платформи та операційної системи. Це є великою перевагою у порівнянні з 
нативними додатками.
5. PWA працює за протоколом HTTPS, що робить технологію дуже захищеною.
6. Клієнтська частина розробки відокремлена від серверної частини. Завдяки цьому витрачається менше ресурсів 
та часу на розробку та доопрацювання дизайну.
7. Головною перевагою PWA перед традиційними програмами є обсяг, який вона займає у пам'яті пристрою.

До недоліків PWA можна віднести:

1. PWA не має повного доступу до всіх низькорівневих функцій мобільних пристроїв.
2. Робота офлайн обмежена, тому що будь-який веб-додаток орієнтований у першу чаргу на роботу з доступом до інтернету.
3. Користувачі не можуть вирішити оновити програму, оскільки програма автоматично оновлюється після відвідування.
4. Не всі операційні системи підтримують повний функціонал PWA. Це наслідок того, що сама технологія впроваджена 
ще не на всі платформи, хоча підтримується найпопулярнішими операційними системами. 

Іноваційні розробки PWA є перспективним напрямком для розробників мобільних додатків та вимагає уваги науковців, 
котрий не можна недооцінити у порівнянні з існуючими стратегіями мобільного розвитку. Ця технологія повністю 
внесла новий вимір за допомогою сервісного працівника, оболонки програми та інших компонентів, що полегчує 
автономне завантаження, фонову синхронізацію, push-повідовлення мобільних додатків. Таким чином роблячи 
веб-програми схожими на рідні та гібрідні програми.

===============================================================================================
===============================================================================================

Об’єктно-орієнтований підхід в програмуванні. Композиційна взаємодія об’єктів.

Один з популярних та актуальних сьогодні підходів в програмувані це ООП (об'єктно-орієнтовний підхід). 
Кількість існуючих підходів складно визначити однозначно та й кордони між конкретними підходами бувають
досить умовними. Так, наприклад, автор К.А.Хайдаров визначає ООП програмування наступний чином:
"программа - это несколько взаимодействующих объектов, где функциональность и данные распределяються между
этими объектами" (мовою оригіналу). Ключовим моментом є взаємодія об'єктів, але в той же час відсутні чіткі 
правила визначення цієї взаємодії.

ООП базується на основі процедурного програмування. З моменту виникнення ідеї нового підходу у програмуванні,
запропонована Аланом Кеєм, ООП постійно еволюціонував. Базові поняття та їх трактування не набули суттевих
змін, але в деталях та нюансах виникає ряд протиріч. Протиріччя породжено різними факторами, зокрема особливостями
реалізації ООП в різних мовах програмування, і як наслідок, трактуванням даних понять різними авторами,
де вони опираються на певну мову програмування, а не розглядають ООП як абсолютну абстракцію. У зв'язку з 
відсутнісю чіткої класифікації типів взаємодії, різні автори достатньо вільно трактують дані поняття. Це породжує 
певні протиріччя та ускладнює розуміння даних аспектів ООП. Питання конкретизації типів взаємодії та визначення, 
який з типів має бути реалізований в тому чи іншому випадку, є досить складними, незважаючи на простоту свого 
формулювання. 

Залежність є найпростішим видом відносин між об'єктами, яка вказує на залежність одного об'єкта від спеціфікації 
іншого. Спеціфікація, опис, визначення, оголошення, технічне завдання, умови та вимоги - опис поведінки
об'єкта. Якщо об'єкти знаходяться у відносній залежності, то залежний об'єкт тісно призв'язаний до технічних умов 
базового об'єкта. У випадку змінення спеціфікації базового об'єкта, це мусить змінювати і залежний об'єкт.

Композиція, агрегація і асоціація - це терміни, які визначають відносини між об'єктами або класами між собою.
В класичних роботах з теорії ООП пропонується п'ять основних типів відносин. 
- асоціація
- агрегація
- композиція
- успадкування
- реалізація

Асоціація, композиція та агрегація - це типи відносин відмінності між об'єктами, які відрізняються тільки
ступенем сили зв'язку та реазізують окремий вид зв'язку. Успадкування та реалізація це окремі типи, на даний 
момент не розглядаємо.

Асоціація - такий тип, при якому об'єкти будуть посилатися один на одного, при цьому залишаються повністю
незалежними один від одного, наприклад: "СТО" та "МЕХАНІК".

Агрегація - тип відносин, коли один об'єкт є частиною іншого. Агрегація утворює слабкий зв'язок між об'єктами.
Всі залежні класи ініціалізуються поза основним об'єктом, наприклад: "АВТОМОБІЛЬ" та "ВОДІЙ".

Композація - тип відносин, при яких один об'єкт може належати тільки іншому об'єкту і нікому іншому. При таких
відносинах утворюється сильний зв'язок між об'єктами, де основний об'єкт повністю забеспечує життєвий цикл 
об'єктів, від яких він залежить, наприклад: "АВТОМОБІЛЬ" та "ВИГУК".
Відштовхуючись від такого визначення відносин, визначимо деякі особливості "композиції".
Композиція - це концепція моделювання відносин, яка означає, що клас Composite може містити об'єкт іншого класу
Component. Клас Composite включає в себе виклики конструкторів інших класів. В результаті виходить, при
створені об'єкта класу-контейнера створюються об'єкти включених в нього класів-компонентів.

При взаємодії типу "композиції" можна виділити наступні особоливості:
1. класи-компоненти не можуть існувати окремо від контейнера.
2. класи-компоненти не можуть бути створені окремо від класу-контейнера.
3. при створені класу-контейнера обов'язково створюються всі екземпляри класів-компонентів.
4. при видалені класу-контейнера, порпередньо, повинні бути видалені всі класи-компоненти.

З визначення поняття "композиції" композуючий об'єкт може існувати тільки як частина контейнера. У разі знищення 
контейнера буде знищений включений об'єкт також. Тобто поняття "композиції" однозначно визначає тільки момент 
знищення, але не момент створення об'єкта, котрий композиційно включається до класу. Виходячи з цього можна 
однозначно ствердити про неможливість створення об'єкта окремо, котрий входить до композиції. Резюмуючи можна
зробити висновки: в композиції контейнер повнісю керує життевим циклом об'єктів, котрі входять в композицію і
може створювати, не створювати, знищувати чи динамічно змінювати їх в залежності від своєї логіки. При композіції
"контейнер" може існувати без вмісту, а навпаки не можливо і вміст знищується разом з "контейнером".

Гнучкість ООП є одночасно як перевагою, так і недоліком; питання про взаємодію обяєктів в черговий раз демонструє
цей факт.

===============================================================================================
===============================================================================================
 
 Навчання створенню інтерактивних вебсторінок із використанням методів масивів мови JavaScript та студентських мініпроєктів.

 На даний час World Wide Web є важливим середовищем бізнес-діяльності, комерції, освіти, дослідницької роботи,
 спілкування та розваг, яке впливає практично на всі сфери нашої діяльності. Комерційні та некомерційні компанії активно
 використовують потужні можливості ціїє служби інтернету, створюють власні сайти, побудова яких стає з кожним роком 
 складнішою з погляду структури, дизайну, наявності інтерактивних елементів тощо. На сучасному етапі розвитку вебтехнологій 
 все більше зростає попит на дтинамічні, інтерактивні та візуально привабливі сайти. Розробники шукають способи автоматичного 
 створення як графічних елементів, таких як таблиці, схеми, графіки тощо, так і текстових або числових. Розвиток мови 
 програмування JavaScript дає змогу викладачам обирати різні підходи до навчання студентів створення різноманітних 
 інтерактивних елементів вебсторінок. Включення до навчальної програми завдань на вивчення методів масивів із створенням 
 користувацьких функцій у JavaScript, результатом виконання яких є візуальний ефект, дає змогу студентам усвідовити особливості
 розробки таких функцій, заохотити їх дослідження, додати елементи креативності.